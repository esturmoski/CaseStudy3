

clear all
close all



rays = importdata('lightField.mat');

%% Q1

w = 0.005;
%w can be adjusted (Q1.b)

NPix = 200;
%NPix can be adjusted (Q1.c)

[img, x, y] = rays2img(rays(1,:), rays(3,:), w, NPix);
I = mat2gray(img);

figure
imshow(I)
%Converts rays dataset into image


%% Adjust d. (Q1.d)

d = 1;

M = eye(4);
M(1,2) = M(1,2)+d;
M(3,4) = M(3,4)+d;
%Defines free-space propogation matrix

rays_d = M*rays;


[imgd, xd, yd] = rays2img(rays_d(1,:), rays_d(3,:), w, NPix);
Id = mat2gray(imgd);


figure
imshow(Id)
%Converts free-space propogation into image


%% Q3

f = 0.09015;
d2 = 1/(1/f - 1/(0.37-0.005+0.001*35+0.0036))+0.0002;
d1 = 1/(1/f - 1/d2);
%d1: distance between object and lens
%d2: distance between viewer and lens
%f: focal length of lens

Mf = eye(4);
Mf(2,1) = Mf(2,1)-1/f;
Mf(4,3) = Mf(4,3)-1/f;
%Matrix for lens bending

Md2 = eye(4);
Md2(1,2) = Md2(1,2)+d2;
Md2(3,4) = Md2(3,4)+d2;
%New Matrix for light propogation (image plane)

raysSharp = Md2*Mf*rays;

NPix = 2000;

[imgSharp, xd, yd] = rays2img(-raysSharp(1,:), raysSharp(3,:), w, NPix);
IS = mat2gray(imgSharp);

figure
imshow(IS)
%Converts lens-altered dataset into image

fprintf('Part 2 Values \n')
fprintf('Propogation distance (d2) value: %1.5f (m) \n', d2)
fprintf('Focal length (f) value: %1.5f (m) \n', f)
fprintf('\n')
%Prints values of d2 and f


%% Part 3 (Competition)

f = 0.0918;
d2 = 0.1161;
d1 = 1/(1/f-1/d1);
%d1: distance between object and lens
%d2: distance between viewer and lens
%f: focal length of lens

Mf = eye(4);
Mf(2,1) = Mf(2,1)-1/f;
Mf(4,3) = Mf(4,3)-1/f;
%Matrix for lens bending

Md2 = eye(4);
Md2(1,2) = Md2(1,2)+d2;
Md2(3,4) = Md2(3,4)+d2;
%New Matrix for light propogation (image plane)

raysSharp = Md2*Mf*rays;

NPix = 200;

[imgSharp, xd, yd] = rays2img(-raysSharp(1,:), raysSharp(3,:), w, NPix);
IS = mat2gray(imgSharp);

figure
imshow(IS)
%Converts lens-altered dataset into image

fprintf('Part 3 (Competition) Values \n')
fprintf('Propogation distance (d2) value: %1.5f (m) \n', d2)
fprintf('Focal length (f) value: %1.5f (m) \n', f)
%Prints values of d2 and f






function [img,x,y] = rays2img(rays_x,rays_y,width,Npixels)
% rays2img - Simulates the operation of a camera sensor, where each pixel
% simply collects (i.e., counts) all of the rays that intersect it. The
% image sensor is assumed to be square with 100% fill factor (no dead
% areas) and 100% quantum efficiency (each ray intersecting the sensor is
% collected).
%
% inputs:
% rays_x: A 1 x N vector representing the x position of each ray in meters.
% rays_y: A 1 x N vector representing the y position of each ray in meters.
% width: A scalar that specifies the total width of the image sensor in 
%   meters.
% Npixels: A scalar that specifies the number of pixels along one side of 
%   the square image sensor.
%
% outputs:
% img: An Npixels x Npixels matrix representing a grayscale image captured 
%   by an image sensor with a total Npixels^2 pixels.
% x: A 1 x 2 vector that specifies the x positions of the left and right 
%   edges of the imaging sensor in meters.
% y: A 1 x 2 vector that specifies the y positions of the bottom and top 
%   edges of the imaging sensor in meters.
%
% Matthew Lew 11/27/2018
% 11/26/2021 - edited to create grayscale images from a rays_x, rays_y
% vectors
% 11/9/2022 - updated to fix axis flipping created by histcounts2()

% eliminate rays that are off screen
onScreen = abs(rays_x)<width/2 & abs(rays_y)<width/2;
x_in = rays_x(onScreen);
y_in = rays_y(onScreen);

% separate screen into pixels, calculate coordinates of each pixel's edges
mPerPx = width/Npixels;
Xedges = ((1:Npixels+1)-(1+Npixels+1)/2)*mPerPx;
Yedges = ((1:Npixels+1)-(1+Npixels+1)/2)*mPerPx;

% count rays at each pixel within the image
img = histcounts2(y_in,x_in,Yedges,Xedges);    % histcounts2 for some reason assigns x to rows, y to columns


% rescale img to uint8 dynamic range
img = uint8(round(img/max(img(:)) * 255));
x = Xedges([1 end]);
y = Yedges([1 end]);

% figure;
% image(x_edges([1 end]),y_edges([1 end]),img); axis image xy;
end

